#!/usr/bin/env python3

import pandas as pd
import numpy as np
import math
import argparse
import os
import shutil

def buildMatrix(inMash):

    # read mash results and create array
    df = pd.read_csv(inMash, header=None, sep='\t')
    iniArray = df.to_numpy()

    # calculate number of fastas, and use to split iniArray and create mash matrix
    numFastas = math.sqrt(len(iniArray))    
    colList = np.split(iniArray[:,2], numFastas)   
    mashMatrix = np.vstack(colList)
    
    # find average distance of each row
    sumArray = mashMatrix.sum(axis=1)
    avArray = sumArray/numFastas

    # find filenames and append to average distance
    filenames = iniArray[0:int(numFastas), 1]
    fileavArray = np.column_stack((filenames, avArray))

    return fileavArray

def fastaMove(cleanPath, discardPath, fastaPath, fileavArray):

    # collect clean fastas
    cleanIndices = np.argwhere(fileavArray[:,1] < 0.003)
    
    cleanFasta = []
    for elem in np.nditer(cleanIndices):
        cleanFasta.append(fileavArray[elem, 0])

    # collect fastas to discard
    discardFasta = np.setdiff1d(filenames, np.asarray(cleanFasta))

    # move files to add or discard directory
    for elem in cleanFasta:
        shutil.move(fastaPath + "/" + elem, cleanPath + "/" + elem)
    for elem in list(discardFasta):
        shutil.move(fastaPath + "/" + elem, discardPath + "/" + elem)
    
if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input-mash", dest="inMash", required=True,
                        help="Path to the input mash results")
    parser.add_argument("-f", "--fasta-path", dest="fastaPath", required=True,
                        help="Path to the fasta files")
    parser.add_argument("-c", "--clean-path", dest="cleanPath", required=True,
                        help="Path to move the clean fasta files to")
    parser.add_argument("-d", "--discard-path", dest="discardPath", required=True,
                        help="Path to move the discarded fasta files to")

    args = parser.parse_args()
    inMash = args.inMash
    cleanPath = args.cleanPath
    discardPath = args.discardPath
    fastaPath = args.fastaPath

    fileavArray = buildMatrix(inMash)
    fastaMove(cleanPath, discardPath, fastaPath, fileavArray)
