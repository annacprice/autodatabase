#!/usr/bin/env python3

import pandas as pd
import numpy as np
import math
import argparse
import os
import re

def buildMatrix(inMash):

    # read mash results and create array
    df = pd.read_csv(inMash, header=None, sep='\t')
    iniArray = df.to_numpy()

    # calculate number of fastas, and use to split iniArray and create mash matrix
    numFastas = math.sqrt(len(iniArray))    
    colList = np.split(iniArray[:,2], numFastas)   
    mashMatrix = np.vstack(colList)
    
    # find average distance of each row
    sumArray = mashMatrix.sum(axis=1)
    avArray = sumArray/numFastas

    # find filenames and append to average distance
    filenames = iniArray[0:int(numFastas), 1]
    fileavArray = np.column_stack((filenames, avArray))

    # get tax ID
    regex = re.compile(r'\d+')
    tax = regex.findall(str(inMash))

    return fileavArray, tax

def fastaMove(fileavArray, tax):

    # collect clean fastas
    cleanIndices = np.argwhere(fileavArray[:,1] < 0.1)
    
    cleanFasta = []
    # if cleanIndices is not empty
    if cleanIndices.size:
    	for elem in np.nditer(cleanIndices):
            cleanFasta.append(fileavArray[elem, 0])

    # collect fastas to discard
    discardFasta = np.setdiff1d(fileavArray[:,0], np.asarray(cleanFasta))

    # write to file
    cleanList = str(tax[0]) + "_cleanFasta.txt"
    with open(cleanList, "w") as file_out:
        for elem in cleanFasta:
            file_out.write("%s\n" % elem)

    discardList = str(tax[0]) + "_discardFasta.txt"
    with open(discardList, "w") as file_out:
        for elem in list(discardFasta):
            file_out.write("%s\n" % elem)
    
if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input-mash", dest="inMash", required=True,
                        help="Path to the input mash results")
    
    args = parser.parse_args()
    inMash = args.inMash

    fileavArray, tax = buildMatrix(inMash)
    fastaMove(fileavArray, tax)
